'use strict';

var layer = {};
module.exports = layer;

layer.Root = require('./root');
layer.Client = require('./client');
layer.ClientAuthenticator = require('./client-authenticator');
layer.Syncable = require('./models/syncable');
layer.Conversation = require('./models/conversation');
layer.Channel = require('./models/channel');
layer.Container = require('./models/container');
layer.Message = require('./models/message');
layer.Message.ConversationMessage = require('./models/conversation-message');
layer.Message.ChannelMessage = require('./models/channel-message');
layer.Announcement = require('./models/announcement');
layer.MessagePart = require('./models/message-part');
layer.Content = require('./models/content');
layer.Query = require('./queries/query');
layer.QueryBuilder = require('./queries/query-builder');
layer.xhr = require('./xhr');
layer.Identity = require('./models/identity');
layer.Membership = require('./models/membership');
layer.LayerError = require('./layer-error');
layer.LayerEvent = require('./layer-event');
layer.SyncManager = require('./sync-manager');
layer.SyncEvent = require('./sync-event').SyncEvent;
layer.XHRSyncEvent = require('./sync-event').XHRSyncEvent;
layer.WebsocketSyncEvent = require('./sync-event').WebsocketSyncEvent;
layer.Websockets = {
  SocketManager: require('./websockets/socket-manager'),
  RequestManager: require('./websockets/request-manager'),
  ChangeManager: require('./websockets/change-manager')
};
layer.OnlineStateManager = require('./online-state-manager');
layer.DbManager = require('./db-manager');
layer.Constants = require('./const');
layer.Util = require('./client-utils');
layer.TypingIndicators = require('./typing-indicators/typing-indicators');
layer.TypingIndicators.TypingListener = require('./typing-indicators/typing-listener');
layer.TypingIndicators.TypingPublisher = require('./typing-indicators/typing-publisher');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9sYXllci5qcyJdLCJuYW1lcyI6WyJsYXllciIsIm1vZHVsZSIsImV4cG9ydHMiLCJSb290IiwicmVxdWlyZSIsIkNsaWVudCIsIkNsaWVudEF1dGhlbnRpY2F0b3IiLCJTeW5jYWJsZSIsIkNvbnZlcnNhdGlvbiIsIkNoYW5uZWwiLCJDb250YWluZXIiLCJNZXNzYWdlIiwiQ29udmVyc2F0aW9uTWVzc2FnZSIsIkNoYW5uZWxNZXNzYWdlIiwiQW5ub3VuY2VtZW50IiwiTWVzc2FnZVBhcnQiLCJDb250ZW50IiwiUXVlcnkiLCJRdWVyeUJ1aWxkZXIiLCJ4aHIiLCJJZGVudGl0eSIsIk1lbWJlcnNoaXAiLCJMYXllckVycm9yIiwiTGF5ZXJFdmVudCIsIlN5bmNNYW5hZ2VyIiwiU3luY0V2ZW50IiwiWEhSU3luY0V2ZW50IiwiV2Vic29ja2V0U3luY0V2ZW50IiwiV2Vic29ja2V0cyIsIlNvY2tldE1hbmFnZXIiLCJSZXF1ZXN0TWFuYWdlciIsIkNoYW5nZU1hbmFnZXIiLCJPbmxpbmVTdGF0ZU1hbmFnZXIiLCJEYk1hbmFnZXIiLCJDb25zdGFudHMiLCJVdGlsIiwiVHlwaW5nSW5kaWNhdG9ycyIsIlR5cGluZ0xpc3RlbmVyIiwiVHlwaW5nUHVibGlzaGVyIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLFFBQVEsRUFBZDtBQUNBQyxPQUFPQyxPQUFQLEdBQWlCRixLQUFqQjs7QUFFQUEsTUFBTUcsSUFBTixHQUFhQyxRQUFRLFFBQVIsQ0FBYjtBQUNBSixNQUFNSyxNQUFOLEdBQWVELFFBQVEsVUFBUixDQUFmO0FBQ0FKLE1BQU1NLG1CQUFOLEdBQTRCRixRQUFRLHdCQUFSLENBQTVCO0FBQ0FKLE1BQU1PLFFBQU4sR0FBaUJILFFBQVEsbUJBQVIsQ0FBakI7QUFDQUosTUFBTVEsWUFBTixHQUFxQkosUUFBUSx1QkFBUixDQUFyQjtBQUNBSixNQUFNUyxPQUFOLEdBQWdCTCxRQUFRLGtCQUFSLENBQWhCO0FBQ0FKLE1BQU1VLFNBQU4sR0FBa0JOLFFBQVEsb0JBQVIsQ0FBbEI7QUFDQUosTUFBTVcsT0FBTixHQUFnQlAsUUFBUSxrQkFBUixDQUFoQjtBQUNBSixNQUFNVyxPQUFOLENBQWNDLG1CQUFkLEdBQW9DUixRQUFRLCtCQUFSLENBQXBDO0FBQ0FKLE1BQU1XLE9BQU4sQ0FBY0UsY0FBZCxHQUErQlQsUUFBUSwwQkFBUixDQUEvQjtBQUNBSixNQUFNYyxZQUFOLEdBQXFCVixRQUFRLHVCQUFSLENBQXJCO0FBQ0FKLE1BQU1lLFdBQU4sR0FBb0JYLFFBQVEsdUJBQVIsQ0FBcEI7QUFDQUosTUFBTWdCLE9BQU4sR0FBZ0JaLFFBQVEsa0JBQVIsQ0FBaEI7QUFDQUosTUFBTWlCLEtBQU4sR0FBY2IsUUFBUSxpQkFBUixDQUFkO0FBQ0FKLE1BQU1rQixZQUFOLEdBQXFCZCxRQUFRLHlCQUFSLENBQXJCO0FBQ0FKLE1BQU1tQixHQUFOLEdBQVlmLFFBQVEsT0FBUixDQUFaO0FBQ0FKLE1BQU1vQixRQUFOLEdBQWlCaEIsUUFBUSxtQkFBUixDQUFqQjtBQUNBSixNQUFNcUIsVUFBTixHQUFtQmpCLFFBQVEscUJBQVIsQ0FBbkI7QUFDQUosTUFBTXNCLFVBQU4sR0FBbUJsQixRQUFRLGVBQVIsQ0FBbkI7QUFDQUosTUFBTXVCLFVBQU4sR0FBbUJuQixRQUFRLGVBQVIsQ0FBbkI7QUFDQUosTUFBTXdCLFdBQU4sR0FBb0JwQixRQUFRLGdCQUFSLENBQXBCO0FBQ0FKLE1BQU15QixTQUFOLEdBQWtCckIsUUFBUSxjQUFSLEVBQXdCcUIsU0FBMUM7QUFDQXpCLE1BQU0wQixZQUFOLEdBQXFCdEIsUUFBUSxjQUFSLEVBQXdCc0IsWUFBN0M7QUFDQTFCLE1BQU0yQixrQkFBTixHQUEyQnZCLFFBQVEsY0FBUixFQUF3QnVCLGtCQUFuRDtBQUNBM0IsTUFBTTRCLFVBQU4sR0FBbUI7QUFDakJDLGlCQUFlekIsUUFBUSw2QkFBUixDQURFO0FBRWpCMEIsa0JBQWdCMUIsUUFBUSw4QkFBUixDQUZDO0FBR2pCMkIsaUJBQWUzQixRQUFRLDZCQUFSO0FBSEUsQ0FBbkI7QUFLQUosTUFBTWdDLGtCQUFOLEdBQTJCNUIsUUFBUSx3QkFBUixDQUEzQjtBQUNBSixNQUFNaUMsU0FBTixHQUFrQjdCLFFBQVEsY0FBUixDQUFsQjtBQUNBSixNQUFNa0MsU0FBTixHQUFrQjlCLFFBQVEsU0FBUixDQUFsQjtBQUNBSixNQUFNbUMsSUFBTixHQUFhL0IsUUFBUSxnQkFBUixDQUFiO0FBQ0FKLE1BQU1vQyxnQkFBTixHQUF5QmhDLFFBQVEsdUNBQVIsQ0FBekI7QUFDQUosTUFBTW9DLGdCQUFOLENBQXVCQyxjQUF2QixHQUF3Q2pDLFFBQVEscUNBQVIsQ0FBeEM7QUFDQUosTUFBTW9DLGdCQUFOLENBQXVCRSxlQUF2QixHQUF5Q2xDLFFBQVEsc0NBQVIsQ0FBekMiLCJmaWxlIjoibGF5ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBsYXllciA9IHt9O1xubW9kdWxlLmV4cG9ydHMgPSBsYXllcjtcblxubGF5ZXIuUm9vdCA9IHJlcXVpcmUoJy4vcm9vdCcpO1xubGF5ZXIuQ2xpZW50ID0gcmVxdWlyZSgnLi9jbGllbnQnKTtcbmxheWVyLkNsaWVudEF1dGhlbnRpY2F0b3IgPSByZXF1aXJlKCcuL2NsaWVudC1hdXRoZW50aWNhdG9yJyk7XG5sYXllci5TeW5jYWJsZSA9IHJlcXVpcmUoJy4vbW9kZWxzL3N5bmNhYmxlJyk7XG5sYXllci5Db252ZXJzYXRpb24gPSByZXF1aXJlKCcuL21vZGVscy9jb252ZXJzYXRpb24nKTtcbmxheWVyLkNoYW5uZWwgPSByZXF1aXJlKCcuL21vZGVscy9jaGFubmVsJyk7XG5sYXllci5Db250YWluZXIgPSByZXF1aXJlKCcuL21vZGVscy9jb250YWluZXInKTtcbmxheWVyLk1lc3NhZ2UgPSByZXF1aXJlKCcuL21vZGVscy9tZXNzYWdlJyk7XG5sYXllci5NZXNzYWdlLkNvbnZlcnNhdGlvbk1lc3NhZ2UgPSByZXF1aXJlKCcuL21vZGVscy9jb252ZXJzYXRpb24tbWVzc2FnZScpO1xubGF5ZXIuTWVzc2FnZS5DaGFubmVsTWVzc2FnZSA9IHJlcXVpcmUoJy4vbW9kZWxzL2NoYW5uZWwtbWVzc2FnZScpO1xubGF5ZXIuQW5ub3VuY2VtZW50ID0gcmVxdWlyZSgnLi9tb2RlbHMvYW5ub3VuY2VtZW50Jyk7XG5sYXllci5NZXNzYWdlUGFydCA9IHJlcXVpcmUoJy4vbW9kZWxzL21lc3NhZ2UtcGFydCcpO1xubGF5ZXIuQ29udGVudCA9IHJlcXVpcmUoJy4vbW9kZWxzL2NvbnRlbnQnKTtcbmxheWVyLlF1ZXJ5ID0gcmVxdWlyZSgnLi9xdWVyaWVzL3F1ZXJ5Jyk7XG5sYXllci5RdWVyeUJ1aWxkZXIgPSByZXF1aXJlKCcuL3F1ZXJpZXMvcXVlcnktYnVpbGRlcicpO1xubGF5ZXIueGhyID0gcmVxdWlyZSgnLi94aHInKTtcbmxheWVyLklkZW50aXR5ID0gcmVxdWlyZSgnLi9tb2RlbHMvaWRlbnRpdHknKTtcbmxheWVyLk1lbWJlcnNoaXAgPSByZXF1aXJlKCcuL21vZGVscy9tZW1iZXJzaGlwJyk7XG5sYXllci5MYXllckVycm9yID0gcmVxdWlyZSgnLi9sYXllci1lcnJvcicpO1xubGF5ZXIuTGF5ZXJFdmVudCA9IHJlcXVpcmUoJy4vbGF5ZXItZXZlbnQnKTtcbmxheWVyLlN5bmNNYW5hZ2VyID0gcmVxdWlyZSgnLi9zeW5jLW1hbmFnZXInKTtcbmxheWVyLlN5bmNFdmVudCA9IHJlcXVpcmUoJy4vc3luYy1ldmVudCcpLlN5bmNFdmVudDtcbmxheWVyLlhIUlN5bmNFdmVudCA9IHJlcXVpcmUoJy4vc3luYy1ldmVudCcpLlhIUlN5bmNFdmVudDtcbmxheWVyLldlYnNvY2tldFN5bmNFdmVudCA9IHJlcXVpcmUoJy4vc3luYy1ldmVudCcpLldlYnNvY2tldFN5bmNFdmVudDtcbmxheWVyLldlYnNvY2tldHMgPSB7XG4gIFNvY2tldE1hbmFnZXI6IHJlcXVpcmUoJy4vd2Vic29ja2V0cy9zb2NrZXQtbWFuYWdlcicpLFxuICBSZXF1ZXN0TWFuYWdlcjogcmVxdWlyZSgnLi93ZWJzb2NrZXRzL3JlcXVlc3QtbWFuYWdlcicpLFxuICBDaGFuZ2VNYW5hZ2VyOiByZXF1aXJlKCcuL3dlYnNvY2tldHMvY2hhbmdlLW1hbmFnZXInKSxcbn07XG5sYXllci5PbmxpbmVTdGF0ZU1hbmFnZXIgPSByZXF1aXJlKCcuL29ubGluZS1zdGF0ZS1tYW5hZ2VyJyk7XG5sYXllci5EYk1hbmFnZXIgPSByZXF1aXJlKCcuL2RiLW1hbmFnZXInKTtcbmxheWVyLkNvbnN0YW50cyA9IHJlcXVpcmUoJy4vY29uc3QnKTtcbmxheWVyLlV0aWwgPSByZXF1aXJlKCcuL2NsaWVudC11dGlscycpO1xubGF5ZXIuVHlwaW5nSW5kaWNhdG9ycyA9IHJlcXVpcmUoJy4vdHlwaW5nLWluZGljYXRvcnMvdHlwaW5nLWluZGljYXRvcnMnKTtcbmxheWVyLlR5cGluZ0luZGljYXRvcnMuVHlwaW5nTGlzdGVuZXIgPSByZXF1aXJlKCcuL3R5cGluZy1pbmRpY2F0b3JzL3R5cGluZy1saXN0ZW5lcicpO1xubGF5ZXIuVHlwaW5nSW5kaWNhdG9ycy5UeXBpbmdQdWJsaXNoZXIgPSByZXF1aXJlKCcuL3R5cGluZy1pbmRpY2F0b3JzL3R5cGluZy1wdWJsaXNoZXInKTtcbiJdfQ==
